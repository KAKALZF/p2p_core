<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xmg.springboot.p2p.base.mapper.AccountMapper">
	<resultMap id="BaseResultMap" type="com.xmg.springboot.p2p.base.domain.Account">
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="tradePassword" jdbcType="VARCHAR" property="tradePassword" />
		<result column="usableAmount" jdbcType="DECIMAL" property="usableAmount" />
		<result column="freezedAmount" jdbcType="DECIMAL" property="freezedAmount" />
		<result column="borrowLimitAmount" jdbcType="DECIMAL" property="borrowLimitAmount" />
		<result column="version" jdbcType="INTEGER" property="version" />
		<result column="unReceiveInterest" jdbcType="DECIMAL" property="unReceiveInterest" />
		<result column="unReceivePrincipal" jdbcType="DECIMAL"
			property="unReceivePrincipal" />
		<result column="unReturnAmount" jdbcType="DECIMAL" property="unReturnAmount" />
		<result column="remainBorrowLimit" jdbcType="DECIMAL" property="remainBorrowLimit" />
	</resultMap>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		delete from
		account
		where id = #{id,jdbcType=BIGINT}
	</delete>
	<insert id="insert" keyProperty="id" useGeneratedKeys="true">
		insert
		into account (id,tradePassword, usableAmount,
		freezedAmount,
		borrowLimitAmount, version, unReceiveInterest,
		unReceivePrincipal,
		unReturnAmount, remainBorrowLimit
		)
		values
		(#{id},#{tradePassword,jdbcType=VARCHAR},
		#{usableAmount,jdbcType=DECIMAL},
		#{freezedAmount,jdbcType=DECIMAL},
		#{borrowLimitAmount,jdbcType=DECIMAL}, #{version,jdbcType=INTEGER},
		#{unReceiveInterest,jdbcType=DECIMAL},
		#{unReceivePrincipal,jdbcType=DECIMAL},
		#{unReturnAmount,jdbcType=DECIMAL},
		#{remainBorrowLimit,jdbcType=DECIMAL}
		)
	</insert>
	<update id="updateByPrimaryKey">
		update account
		set
		tradePassword =
		#{tradePassword,jdbcType=VARCHAR},
		usableAmount =
		#{usableAmount,jdbcType=DECIMAL},
		freezedAmount =
		#{freezedAmount,jdbcType=DECIMAL},
		borrowLimitAmount =
		#{borrowLimitAmount,jdbcType=DECIMAL},
		version = version+1,
		unReceiveInterest =
		#{unReceiveInterest,jdbcType=DECIMAL},
		unReceivePrincipal =
		#{unReceivePrincipal,jdbcType=DECIMAL},
		unReturnAmount =
		#{unReturnAmount,jdbcType=DECIMAL},
		remainBorrowLimit =
		#{remainBorrowLimit,jdbcType=DECIMAL}
		where id = #{id,jdbcType=BIGINT}
		and version=#{version}
	</update>
	<select id="selectByPrimaryKey" parameterType="java.lang.Long"
		resultMap="BaseResultMap">
		select *
		from account
		where id =
		#{id,jdbcType=BIGINT}
	</select>
	<select id="selectAll" resultMap="BaseResultMap">
		select *
		from account
	</select>
</mapper>